[
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
    "test_imports": [],
    "test": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
    "test_imports": [],
    "test": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
    "test_imports": [],
    "test": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 16,
    "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
    "test_imports": [],
    "test": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 17,
    "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
    "test_imports": [],
    "test": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 18,
    "prompt": "Write a function to remove characters from the first string which are present in the second string.",
    "code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
    "test_imports": [],
    "test": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 19,
    "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
    "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
    "test_imports": [],
    "test": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 20,
    "prompt": "Write a function to check if the given number is woodball or not.",
    "code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
    "test_imports": [],
    "test": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 56,
    "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
    "code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
    "test_imports": [],
    "test": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 57,
    "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
    "code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
    "test_imports": [],
    "test": [
      "assert find_Max_Num([1,2,3]) == 321",
      "assert find_Max_Num([4,5,6,1]) == 6541",
      "assert find_Max_Num([1,2,3,9]) == 9321"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 58,
    "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
    "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
    "test_imports": [],
    "test": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False",
      "assert opposite_Signs(-2,2) == True"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 59,
    "prompt": "Write a function to find the nth octagonal number.",
    "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
    "test_imports": [],
    "test": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 61,
    "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
    "code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
    "test_imports": [],
    "test": [
      "assert count_Substrings('112112') == 6",
      "assert count_Substrings('111') == 6",
      "assert count_Substrings('1101112') == 12"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 62,
    "prompt": "Write a python function to find smallest number in a list.",
    "code": "def smallest_num(xs):\n  return min(xs)\n",
    "test_imports": [],
    "test": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 63,
    "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
    "test_imports": [],
    "test": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 64,
    "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
    "code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
    "test_imports": [],
    "test": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 65,
    "prompt": "Write a function to flatten a list and sum all of its elements.",
    "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
    "test_imports": [],
    "test": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 66,
    "prompt": "Write a python function to count the number of positive numbers in a list.",
    "code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
    "test_imports": [],
    "test": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 67,
    "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
    "code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
    "test_imports": [],
    "test": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 68,
    "prompt": "Write a python function to check whether the given array is monotonic or not.",
    "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
    "test_imports": [],
    "test": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 69,
    "prompt": "Write a function to check whether a list contains the given sublist or not.",
    "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
    "test_imports": [],
    "test": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 70,
    "prompt": "Write a function to find whether all the given tuples have equal length or not.",
    "code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
    "test_imports": [],
    "test": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
      "assert get_equal([(1, 2), (3, 4)]) == True"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 71,
    "prompt": "Write a function to sort a list of elements.",
    "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
    "test_imports": [],
    "test": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 72,
    "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
    "code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
    "test_imports": [],
    "test": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 74,
    "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
    "code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
    "test_imports": [],
    "test": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 75,
    "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
    "test_imports": [],
    "test": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 77,
    "prompt": "Write a python function to find whether a number is divisible by 11.",
    "code": "def is_Diff(n): \n    return (n % 11 == 0) ",
    "test_imports": [],
    "test": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 79,
    "prompt": "Write a python function to check whether the length of the word is odd or not.",
    "code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
    "test_imports": [],
    "test": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 80,
    "prompt": "Write a function to find the nth tetrahedral number.",
    "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
    "test_imports": [],
    "test": [
      "assert tetrahedral_number(5) == 35",
      "assert tetrahedral_number(6) == 56",
      "assert tetrahedral_number(7) == 84"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 82,
    "prompt": "Write a function to find the volume of a sphere.",
    "code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
    "test_imports": [
      "import math"
    ],
    "test": [
      "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
      "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
      "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 83,
    "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
    "code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
    "test_imports": [],
    "test": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 84,
    "prompt": "Write a function to find the nth number in the newman conway sequence.",
    "code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
    "test_imports": [],
    "test": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 85,
    "prompt": "Write a function to find the surface area of a sphere.",
    "code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
    "test_imports": [
      "import math"
    ],
    "test": [
      "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
      "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
      "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
    ]
  },
  {
    "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
    "task_id": 86,
    "prompt": "Write a function to find nth centered hexagonal number.",
    "code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
    "test_imports": [],
    "test": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  }
]